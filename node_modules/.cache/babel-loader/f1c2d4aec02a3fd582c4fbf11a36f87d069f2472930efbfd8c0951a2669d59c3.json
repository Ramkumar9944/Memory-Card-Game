{"ast":null,"code":"var _jsxFileName = \"/home/ram/Documents/Ghost/memory-card-game/src/components/CardItemList.jsx\",\n  _s = $RefreshSig$();\nimport { CardItem } from './CardItem';\nimport GameData from '../app.mock';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CardItemList = () => {\n  _s();\n  const [cardList, setCardList] = useState([...GameData]); // Card data\n  const [selectedCards, setSelectedCards] = useState([]); // To store selected cards for matching\n\n  const onClickHandler = card => {\n    // If we already have 2 cards selected, don't allow more selections\n    if (selectedCards.length === 2) return;\n\n    // Toggle card visibility (show card image on click)\n    const updatedCardList = cardList.map(item => {\n      if (item.id === card.id) {\n        return {\n          ...item,\n          isOpen: true\n        };\n      }\n      return item;\n    });\n    setCardList(updatedCardList); // Update card list state with the new card open status\n\n    // Add clicked card to the selected cards\n    const updatedSelectedCards = [...selectedCards, card];\n    setSelectedCards(updatedSelectedCards);\n\n    // Check if 2 cards are selected\n    if (updatedSelectedCards.length === 2) {\n      const [firstCard, secondCard] = updatedSelectedCards;\n      if (firstCard.name === secondCard.name) {\n        setSelectedCards([]);\n      } else {\n        setTimeout(() => {\n          const resetCardList = cardList.map(item => {\n            if (item.id === firstCard.id || item.id === secondCard.id) {\n              return {\n                ...item,\n                isOpen: false\n              };\n            }\n            return item;\n          });\n          setCardList(resetCardList);\n          setSelectedCards([]);\n        }, 500);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-item-list\",\n    children: cardList.map(item => {\n      return /*#__PURE__*/_jsxDEV(CardItem, {\n        id: item.id,\n        image: item.pic,\n        onClick: () => onClickHandler(item),\n        isOpen: item.isOpen\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(CardItemList, \"hSed7+mcc1tZ62147BScqgKgRBQ=\");\n_c = CardItemList;\nvar _c;\n$RefreshReg$(_c, \"CardItemList\");","map":{"version":3,"names":["CardItem","GameData","useState","jsxDEV","_jsxDEV","CardItemList","_s","cardList","setCardList","selectedCards","setSelectedCards","onClickHandler","card","length","updatedCardList","map","item","id","isOpen","updatedSelectedCards","firstCard","secondCard","name","setTimeout","resetCardList","className","children","image","pic","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ram/Documents/Ghost/memory-card-game/src/components/CardItemList.jsx"],"sourcesContent":["import { CardItem } from './CardItem';\nimport GameData from '../app.mock';\nimport { useState } from 'react';\n\nexport const CardItemList = () => {\n  const [cardList, setCardList] = useState([...GameData]); // Card data\n  const [selectedCards, setSelectedCards] = useState([]); // To store selected cards for matching\n\n  const onClickHandler = (card) => {\n    // If we already have 2 cards selected, don't allow more selections\n    if (selectedCards.length === 2) return;\n\n    // Toggle card visibility (show card image on click)\n    const updatedCardList = cardList.map((item) => {\n      if (item.id === card.id) {\n        return { ...item, isOpen: true };\n      }\n      return item;\n    });\n\n    setCardList(updatedCardList); // Update card list state with the new card open status\n\n    // Add clicked card to the selected cards\n    const updatedSelectedCards = [...selectedCards, card];\n    setSelectedCards(updatedSelectedCards);\n\n    // Check if 2 cards are selected\n    if (updatedSelectedCards.length === 2) {\n      const [firstCard, secondCard] = updatedSelectedCards;\n\n      if (firstCard.name === secondCard.name) {\n        setSelectedCards([]);\n      } else {\n        setTimeout(() => {\n          const resetCardList = cardList.map((item) => {\n            if (item.id === firstCard.id || item.id === secondCard.id) {\n              return { ...item, isOpen: false };\n            }\n            return item;\n          });\n          setCardList(resetCardList);\n          setSelectedCards([]);\n        }, 500);\n      }\n    }\n  };\n\n  return (\n    <div className='card-item-list'>\n      {cardList.map((item) => {\n        return (\n          <CardItem\n            key={item.id}\n            id={item.id}\n            image={item.pic}\n            onClick={() => onClickHandler(item)}\n            isOpen={item.isOpen}\n          />\n        );\n      })}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,YAAY;AACrC,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CAAC,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAAC;EACzD,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExD,MAAMS,cAAc,GAAIC,IAAI,IAAK;IAC/B;IACA,IAAIH,aAAa,CAACI,MAAM,KAAK,CAAC,EAAE;;IAEhC;IACA,MAAMC,eAAe,GAAGP,QAAQ,CAACQ,GAAG,CAAEC,IAAI,IAAK;MAC7C,IAAIA,IAAI,CAACC,EAAE,KAAKL,IAAI,CAACK,EAAE,EAAE;QACvB,OAAO;UAAE,GAAGD,IAAI;UAAEE,MAAM,EAAE;QAAK,CAAC;MAClC;MACA,OAAOF,IAAI;IACb,CAAC,CAAC;IAEFR,WAAW,CAACM,eAAe,CAAC,CAAC,CAAC;;IAE9B;IACA,MAAMK,oBAAoB,GAAG,CAAC,GAAGV,aAAa,EAAEG,IAAI,CAAC;IACrDF,gBAAgB,CAACS,oBAAoB,CAAC;;IAEtC;IACA,IAAIA,oBAAoB,CAACN,MAAM,KAAK,CAAC,EAAE;MACrC,MAAM,CAACO,SAAS,EAAEC,UAAU,CAAC,GAAGF,oBAAoB;MAEpD,IAAIC,SAAS,CAACE,IAAI,KAAKD,UAAU,CAACC,IAAI,EAAE;QACtCZ,gBAAgB,CAAC,EAAE,CAAC;MACtB,CAAC,MAAM;QACLa,UAAU,CAAC,MAAM;UACf,MAAMC,aAAa,GAAGjB,QAAQ,CAACQ,GAAG,CAAEC,IAAI,IAAK;YAC3C,IAAIA,IAAI,CAACC,EAAE,KAAKG,SAAS,CAACH,EAAE,IAAID,IAAI,CAACC,EAAE,KAAKI,UAAU,CAACJ,EAAE,EAAE;cACzD,OAAO;gBAAE,GAAGD,IAAI;gBAAEE,MAAM,EAAE;cAAM,CAAC;YACnC;YACA,OAAOF,IAAI;UACb,CAAC,CAAC;UACFR,WAAW,CAACgB,aAAa,CAAC;UAC1Bd,gBAAgB,CAAC,EAAE,CAAC;QACtB,CAAC,EAAE,GAAG,CAAC;MACT;IACF;EACF,CAAC;EAED,oBACEN,OAAA;IAAKqB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BnB,QAAQ,CAACQ,GAAG,CAAEC,IAAI,IAAK;MACtB,oBACEZ,OAAA,CAACJ,QAAQ;QAEPiB,EAAE,EAAED,IAAI,CAACC,EAAG;QACZU,KAAK,EAAEX,IAAI,CAACY,GAAI;QAChBC,OAAO,EAAEA,CAAA,KAAMlB,cAAc,CAACK,IAAI,CAAE;QACpCE,MAAM,EAAEF,IAAI,CAACE;MAAO,GAJfF,IAAI,CAACC,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKb,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA1DWD,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}